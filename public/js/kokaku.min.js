function Utils() {

}

Utils.prototype.setGetParameter = function(paramName, paramValue)
{
    var url = window.location.href;
    if (url.indexOf(paramName + "=") >= 0)
    {
        var prefix = url.substring(0, url.indexOf(paramName));
        var suffix = url.substring(url.indexOf(paramName));
        suffix = suffix.substring(suffix.indexOf("=") + 1);
        suffix = (suffix.indexOf("&") >= 0) ? suffix.substring(suffix.indexOf("&")) : "";
        url = prefix + paramName + "=" + paramValue + suffix;
    }
    else
    {
    if (url.indexOf("?") < 0)
        url += "?" + paramName + "=" + paramValue;
    else
        url += "&" + paramName + "=" + paramValue;
    }
    window.location.href = url;
}

Utils.prototype.checkParemeterExists = function(parameter)
{
   //Get Query String from url
   fullQString = window.location.search.substring(1);
   
   paramCount = 0;
   queryStringComplete = "?";

   if(fullQString.length > 0)
   {
       //Split Query String into separate parameters
       paramArray = fullQString.split("&");
       
       //Loop through params, check if parameter exists.  
       for (i=0;i<paramArray.length;i++)
       {
         currentParameter = paramArray[i].split("=");
         if(currentParameter[0] == parameter) //Parameter already exists in current url
         {
            return true;
         }
       }
   }
   
   return false;
}

Utils.prototype.isContainNoHTML = function(el) {
  return !$.trim(el.html());
}
// function NavBar() {

//   this.nav = $(".top-nav .list p");

//   this.nav.on('click', this.toggle);
// }

// NavBar.prototype.toggle = function () {
//   $(this).next().toggleClass("show");
// }

/**
 * Module: [module name]
 * Description: [description]
 * Dependencies:
 *   local:
 *     - [local module]
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function NavContent () {
  // current scope
  var self = this;

  // properties
  this.utils = new Utils();
  this.urlParam = {
    orderBy: $(document).getUrlParam('orderBy'),
    order: $(document).getUrlParam('order'),
    view: $(document).getUrlParam('view')
  };

  // jQuery DOM
  this.nav = $(".nav-content span[class^='act'] p");
  this.options = $("#sort-options li");

  // event handler
  this.nav.on('click', this.toggleMenu);
  this.options.on('click', function() {
    self.toggleOption(this, self);
  });

  // initial function
  this.init();
}

/**
 * Initial function
 * @return {void}
 */
NavContent.prototype.init = function() {
  this.setOption(this.urlParam.orderBy, this.urlParam.order);
}

/**
 * Toggle menu
 * @return {void}
 */
NavContent.prototype.toggleMenu = function () {
  var el = $(this);
  el.children().toggleClass("fa-angle-down");
  el.children().toggleClass("fa-angle-up");
  el.next().toggleClass("show");
};

/**
 * Reset menu
 * @return {void}
 */
NavContent.prototype.reset = function() {
  this.options.removeClass("active");
  this.nav.next().removeClass("show");
}

/**
 * Toggle option
 * @param  {scope} parent
 * @param  {scope} self  
 * @return {void}       
 */
NavContent.prototype.toggleOption = function (parent, self) {
  self.reset(); 
  var el = $(parent);
  el.addClass("active");

  var orderBy = el.attr("data-type");
  var order = el.attr("data-order");
  var param = $.param({ view: self.urlParam.view, orderBy: orderBy, order: order });
  window.location.href = 'http://'+window.location.host+""+window.location.pathname+"?"+param;
};

/**
 * Set option
 * @param {string} orderBy
 * @param {string} order  
 */
NavContent.prototype.setOption = function(orderBy, order) {
  this.options.removeClass("active");
  $("#sort-options ."+orderBy+"-"+order).addClass("active");
}
/**
 * Module: Pagination
 * Description: Generate pagination ui
 * Dependencies:
 *   local:
 *   external:
 *     - jQuery
 *     - Mustache.js
 */
function Pagination() {
  // properties
  this.paramUrl = {
    view : $(document).getUrlParam('view'),
    orderBy : $(document).getUrlParam('orderBy'),
    order : $(document).getUrlParam('order')
  };

  this.currentUrl = this.generateUrl(this.paramUrl);

  // jQuery DOM
  this.pagination = $(".pagination");
  this.template = $("#template-pagination");
}

/**
 * Generate url
 * @param  {string} view   
 * @param  {string} orderBy
 * @param  {string} order  
 * @return {string}        
 */
Pagination.prototype.generateUrl = function (param) {

  return 'http://'+window.location.host+""+window.location.pathname+"?"+$.param(param);

}

/**
 * Draw pagination DOM
 * @param  {object} data
 * @return {void}     
 */
Pagination.prototype.draw = function (data) {

  var currentPage = data.current_page;
  var nextPage = currentPage + 1;
  var previousPage = currentPage - 1;
  var param = this.paramUrl;

  if(data.last_page > data.current_page) {
    param.page = nextPage; 
    data.next_page_url = this.generateUrl(param);
  }

  if(data.current_page > 1) {
    param.page = previousPage; 
    data.prev_page_url = this.generateUrl(param);
  }  

  if(data.current_page == 1) {
    data.first_page_url = null;
  } else {
    param.page = 1;
    data.first_page_url = this.generateUrl(param);
  } 

  if(data.last_page == 0) {
    data.last_page_url = null;  
  } else {
    param.page = data.last_page;
    data.last_page_url = this.generateUrl(param);
  } 

  console.log(data);

  var template = this.template.html();
  Mustache.parse(template);
  this.pagination.html(Mustache.render(template, data));
   
}
/**
 * Module: Metadatas
 * Description: Generate metadata DOM
 * Dependencies:
 *   local:
 *     - [local module]
 *   external:
 *     - jQuery
 *     - jquery.geturlparam.js
 */

function Metadatas() {
  this.domain = "http://localhost:8001/";
  // properties
  this.urls = {
    all: this.domain + "metadata/fetchAll/",
    complete: this.domain + "metadata/fetchComplete/",
    incomplete: this.domain + "metadata/fetchIncomplete/"
  };

  this.pagination = new Pagination();
  
  this.urlParam = {
    orderBy: $(document).getUrlParam('orderBy'),
    order: $(document).getUrlParam('order'),
    page: $(document).getUrlParam('page'),
    view: $(document).getUrlParam('view')
  };

  this.auth = new Auth();

  // jQuery DOM
  this.lists = $(".list-items .lists");
  this.template = $("#template-metadatas");

  // initial function
  this.init();
}

/**
 * Initial function
 * @return {void}
 */
Metadatas.prototype.init = function() {

  this.setUrlParam(this.urlParam.orderBy, this.urlParam.order, this.urlParam.page);
  this.draw(this.urlParam.view);

}

/**
 * Set url param
 * @param {string} orderBy
 * @param {string} order  
 * @param {string} page   
 */
Metadatas.prototype.setUrlParam = function(orderBy, order, page) {

  this.urls.all = this.urls.all + orderBy + "/" + order + "?page=" + page;
  this.urls.complete = this.urls.complete + orderBy + "/" + order + "?page=" + page;
  this.urls.incomplete = this.urls.incomplete + orderBy + "/" + order + "?page=" + page;

  // console.log(this.urls);

}

/**
 * Draw metadata list DOM
 * @param  {string} option
 * @return {void}       
 */
Metadatas.prototype.draw = function(option) {

  var self = this;
  var option = option || "all"; 

  $.ajax({
    url: self.urls[option],
    method: "GET",
    dataType: "json",
    success: function(response) {
      self.generateDOM(response.data, option, self);
      self.pagination.draw(response);
    },
    error: function(e, data) {
      console.log(e);
    }
  });

}

/**
 * Generate DOM for metadata
 * @param  {object} data       
 * @param  {string} option     
 * @param  {scope} parentScope
 * @return {void}            
 */
Metadatas.prototype.generateDOM = function(data, option, parentScope) {

  var template = parentScope.template.html();
  Mustache.parse(template);
  var input = {  
    meta: data,
    formatDate: function() { return function(rawdata, render) { return moment(render(rawdata)).fromNow();  }; }
  };
  parentScope.lists.html(Mustache.render(template, input));

}

/**
 * Date format for mustachejs template
 * @param  {string} date
 * @return {string}        
 */
Metadatas.prototype.mustacheFormatDate = function(date) {
  return moment(date, "YYYYMMDD").fromNow();
}

Metadatas.prototype.hasCreator = function() {
  var self = this;

  var token = self.auth.getToken();

  $.ajax({
    url: "http://localhost:8001/api/test",
    method: "GET",
    contentType: "application/json",
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    success: function(response) {
      $("p.user-name").text(response.user.username);
    },
    error: function(e, data) {
      console.log(e);
    }
  });
}
/**
 * Module: Flash
 * Description: flash message handling
 * Dependencies:
 *   local:
 *     - [local module]
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function Flash() {
  // current scope
  var self = this;

  // properties
  this.timeout = 5000;
  this.message = {
    success: "Your files has successfully been uploaded. Complete the metadata.",
    error: "Your files cannot be uploaded. Contact your admin to solve this issue."
  };
  this.flashType = {
    success: "success",
    error: "error"
  };

  // jQuery DOM
  this.container = $(".flash");
  this.message = $(".flash .message");
  this.closeBtn = $(".flash .btn-close");

  // event handler
  this.closeBtn.on("click", $.proxy(this.hide, this));
}

/**
 * Show flash message
 * @param  {string} type    
 * @param  {string} message 
 * @return {void}
 */
Flash.prototype.show = function(type, message) {
  var self = this;
  var message = message || null;

  self.container.addClass(type);
  self.container.addClass("show");

  if(type == self.flashType.error) {
    self.message.html((message ? message : self.message.error));
    self.container.removeClass("success");
  } else {
    self.message.html((message ? message : self.message.success));
    self.container.removeClass("error");
  }

  setTimeout(function() {
    self.hide();
  }, self.timeout);
}

/**
 * Hide flash message
 * @return {void}
 */
Flash.prototype.hide = function() {
  this.container.removeClass("show");
}
/**
 * Module: Auth
 * Description: authentication
 * Dependencies:
 *   local:
 *     - Flash
 *   external:
 *     - jQuery
 *     - js.cookie
 */
function Auth() {
  // current scope
  var self = this;

  self.domain = "http://localhost:8001/"; 

  // properties 
  self.tokenKey = 'tknmm';
  self.userKey = 'usrmm';
  self.syncKey = 'synmm';
  self.creatorKey = 'crtmm';
  self.flash = new Flash();
  self.nanobar = new Nanobar({
    id: "nanobar"
  });

  // jQuery DOM
  self.registerButton = $("#btn-register");
  self.loginButton = $(".input-submit input");

  // event handler
  self.registerButton.on("click", function(e) {
    e.preventDefault();

    self.register();
  });

  self.loginButton.on("click", function(e) {
    e.preventDefault();

    self.login();
  });
}

/**
 * Login to system
 * @param  {string} username
 * @param  {string} password
 * @return {void}         
 */
Auth.prototype.login = function() {

  var self = this;

  var credentials = self.getLoginData();

  $.ajax({
    url: "http://localhost:8001/api/users/login",
    method: "POST",
    contentType: "application/json",
    data: JSON.stringify(credentials),
    success: function(response) {
      self.nanobar.go(100);
      self.saveToken(response.token);
      self.saveUser(response.token);
    },
    progress: function() {
      self.nanobar.go(50);
    },
    error: function(jqXHR) {
      var message = jqXHR.responseJSON.message; 
      self.nanobar.go(100);
      self.flash.show("error", message);
    }
  });

}

/**
 * Redirect to desire option
 * @param  {string} opt
 * @return {void}    
 */
Auth.prototype.redirectTo = function(opt) {
  if(opt == "app") {
    window.location.href = this.domain + "metadata?view=incomplete&orderBy=created_at&order=desc&page=1";
  } else if(opt == "login") {
    window.location.href = this.domain + "login";
  }
}

/**
 * Attempt register
 * @return {void}
 */
Auth.prototype.register = function() {
  var self = this;

  var credentials = self.getRegisterData();

  $.ajax({
    url: "http://localhost:8001/api/users",
    method: "POST",
    contentType: "application/json",
    data: JSON.stringify(credentials),
    success: function(response) {
      self.nanobar.go(100);
      console.log(response);
      self.flash.show("success", "You have successfully been registered. Please <a href='http://localhost:8001/login'>login</a> to continue.");
    },
    progress: function() {
      self.nanobar.go(50);
    },
    error: function(jqXHR) {
      var message = jqXHR.responseJSON.message; 
      self.nanobar.go(100);
      self.flash.show("error", message.join(" "));
    }
  });

}

/**
 * Get login data form
 * @return {object}
 */
Auth.prototype.getLoginData = function() {
  return {
    username: $(".input-username input").val(),
    password: $(".input-password input").val()
  }
}

Auth.prototype.getRegisterData = function() {
  return {
    email: $("#email").val(),
    username: $("#username").val(),
    password: $("#password").val(),
    password_confirmation: $("#validate_password").val()
  }
}

/**
 * Logout user
 * @return {void}
 */
Auth.prototype.logout = function() {

  var self = this;

  var token = self.getToken();

  $.ajax({
    url: "http://localhost:8001/api/users/logout",
    method: "GET",
    contentType: "application/json",
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    success: function(response) {
      self.nanobar.go(100);
      localStorage.removeItem(self.tokenKey);
      localStorage.removeItem(self.userKey);
      localStorage.removeItem(self.syncKey);
      localStorage.removeItem(self.creatorKey);
      self.redirectTo("login");
    },
    progress: function() {
      self.nanobar.go(50);
    },
    error: function(jqXHR) {
      var message = jqXHR.responseJSON.message; 
      self.nanobar.go(100);
      self.flash.show("error", message.join(" "));
    }
  });

}

/**
 * Save token
 * @param  {string} token
 * @return {void}      
 */
Auth.prototype.saveToken = function(token) {

  // Cookies.set(this.tokenKey, token, { path: '/', expires: 7 });
  localStorage.setItem(this.tokenKey, token);

}

/**
 * Get token
 * @return {v} [description]
 */
Auth.prototype.getToken = function() {
  
  return localStorage.getItem(this.tokenKey);

}

/**
 * Check if user is authenticate
 * @return {Boolean}
 */
Auth.prototype.isAuthenticate = function() {

  if(this.getToken() != null) {
    return true;
  } else {
    return false;
  }

}

/**
 * Get user data
 * @return {object}
 */
Auth.prototype.getUser = function() {
  var user = localStorage.getItem(this.userKey);

  return JSON.parse(user);
}

/**
 * Save user data
 * @return {void}
 */
Auth.prototype.saveUser = function(token) {
  var self = this;

  $.ajax({
    url: "http://localhost:8001/api/users",
    method: "GET",
    contentType: "application/json",
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    progress: function() {
      self.nanobar.go(50);
    },
    success: function(response) {
      self.nanobar.go(100);
      localStorage.setItem(self.userKey, JSON.stringify(response.user));
      self.redirectTo("app");
    },
    error: function(e, data) {
      self.nanobar.go(100);
      console.log(e);
    }
  });

}
/**
 * Module: SchemaForm
 * Description: Mainly use for generating dynamic form
 * Dependencies:
 *   local:
 *     - Flash
 *     - Statistic
 *   external:
 *     - jQuery
 *     - Nanobar.js
 *     - Mustache.js
 */
function SchemaForm() {
  // current scope
  var self = this;

  // jQuery DOM
  self.container = $(".items-wrap form");
  self.firstGroup = self.container.children(".group-1");
  self.secondGroup = self.container.children(".group-2");

  self.templateGeneric = $("#template-input-generic");
  self.templateInputSelect = $("#template-input-select");
  self.templateBtnAdd = $("#template-btn-add");
  self.buttonSave = $(".act-save");
  self.buttonUpdate = $(".act-update");
  self.buttonAddFile = $(".act-upload");

  // properties
  self.flash = new Flash();
  self.nanobar = new Nanobar({
    id: "nanobar"
  });
  self.creator = new Creator();
  self.domain = "http://localhost:8001/";

  // event handler
  $(document).on("click", ".btn-add", self.addField);
  this.buttonUpdate.on("click", function(e) { 
    e.preventDefault(); 
    self.submitForm("update"); 
    self.updateStatus(); 
  });
};

SchemaForm.prototype.statistic = null;
SchemaForm.prototype.id = null;

SchemaForm.prototype.init = function() {
  this.render();
};

SchemaForm.prototype.render = function() {
  var self = this;
  $.ajax({
    url: self.domain + "metadata/formSchema.json",
    method: "GET",
    dataType: "json",
    success: function(data) {
      self.drawForm(data);
    }
  });
};

SchemaForm.prototype.setValue = function(itemId) {
  var self = this;
  $.ajax({
    url: self.domain + "metadata/item/"+itemId,
    method: "GET",
    dataType: "json",
    progress: function() {
      self.nanobar.go(50);
    },
    success: function(data) {
      self.nanobar.go(100);
      if($.isEmptyObject(data)) {
        self.flash.show("error", "Data you've requested seems not exist. Are you trying to make a new submission?");
      } else {
        self.setId(data.id);
        self.setUpdateFormTitle(data);
        self.setUpdateStatus(data);
        self.fillForm(data, self);
      }
    },
    error: function(data) {
      console.log(error);
    }
  });
};

SchemaForm.prototype.setId = function (id) {
  this.id = id;
}

SchemaForm.prototype.updateStatus = function() {
  var self = this;
  var itemId = this.id;
  $.ajax({
    url: self.domain + "metadata/item/"+itemId,
    method: "GET",
    dataType: "json",
    progress: function() {
      self.nanobar.go(50);
    },
    success: function(data) {
      self.nanobar.go(100);
      if($.isEmptyObject(data)) {
        self.flash.show("error", "Data you've requested seems not exist. Are you trying to make a new submission?");
      } else {
        self.setUpdateFormTitle(data);
        self.setUpdateStatus(data);
      }
    }
  });
}

SchemaForm.prototype.setUpdateStatus = function(data) {
  var requiredProperties = ['title', 'number', 'publishedDate', 'validDate', 'identifier', 'subject', 'description'];
  var c = 0;
  for(var it in data) {
    if(typeof data[it] === 'string') {
      if(($.inArray(it, requiredProperties) != -1) && (data[it] != '')) {
        c = c + 1;
      }
    }
  }
  $(".nav-content .status").removeClass('incomplete');
  $(".nav-content .status").removeClass('complete');
  
  if(c >= requiredProperties.length) {
    $(".nav-content .status span").text('complete');
    $(".nav-content .status").addClass('complete');
  } else {
    $(".nav-content .status span").text('incomplete');
    $(".nav-content .status").addClass('incomplete');
  }
}

SchemaForm.prototype.setUpdateFormTitle = function(data) {
  if(data.title != '') {
    var title = data.title;
  } else {
    var title = "(no title) "+data.originalFilename;
  }
  $(".nav-content .title").text(title);
}

SchemaForm.prototype.drawForm = function(data) {
  if (typeof data === 'object') {
    if (data.hasOwnProperty('properties')) {
      var source = data.properties;
      for(var key in source) {
        this.addElements(key, source[key]);
      }
    } else {
      throw "Parameter should has properties 'properties'.";
    }
  } else {
    throw "Function requires parameter as an object.";
  }
};

SchemaForm.prototype.fillForm = function(data, parentScope) {
  var source = data;
  for(var key in source) {
    parentScope.fillElements(key, source[key]);
  }
  parentScope.appendListFile(data);
};

SchemaForm.prototype.addElements = function(key, data) {
  if (typeof data === 'object') {
    if(data.enum) {
      this.addSelectElement(key, key, data);
    } else if(data.type == "array") {
      this.addFieldset(key, data);
    } else if(data.type == "object") {
      this.addFieldset(key, data);
    } else {
      this.addElement(key, key, data);
    }
  } else {
    throw 'Second parameter requires an object.';
  }
};

SchemaForm.prototype.appendListFile = function (data) {
  var listFile = $(".list-file");
  var template = 
  '<div class="file">\
  <div class="file-name">'+data.originalFilename+'</div>\
  </div>';
  var buttonAddFile = $(".act-upload");
  buttonAddFile.attr("disable", true);
  listFile.append($(template));
}

SchemaForm.prototype.fillElements = function (key, data) {
  if(typeof data === "string") {
    var str = ".input-"+key;
    this.container.children(".group-1").children(str).children("input, select").val(data);
  }
  if(typeof data == "object") { 
    this.fillArrayElement(key, data);
  }
}

SchemaForm.prototype.objectSize = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

SchemaForm.prototype.fillArrayElement = function (key, data) {
  var index = 0;
  var size = this.objectSize(data);
  for (var item in data) {
    if(typeof data[item] === "object") {
      for (var it in data[item]) {
        var selector = ".input-"+it+" input[name='"+key+"."+index+"."+it+"'], " + ".input-"+it+" select[name='"+key+"."+index+"."+it+"']";
        $(selector).val(data[item][it]);
        if(it == 'id') {
          $(selector).parent().addClass("hidden");
        }
      }
    } else {
      var selector = ".input-"+item+" input[name='"+key+"."+item+"'], " + ".input-"+item+" select[name='"+key+"."+item+"']";
      $(selector).val(data[item]);
      if(it == 'id') {
        $(selector).parent().addClass("hidden");
      }
    }
    index = index + 1;
    if(size > index) {
      $(".add-"+key).trigger("click");
    }
  }
}

SchemaForm.prototype.mustacheRender = function(html, data) {
  var template = html;
  Mustache.parse(template);
  return Mustache.render(template, data);
};

SchemaForm.prototype.addElement = function(key, cls, data) {
  if(typeof data === 'object') {
    if(data.hasOwnProperty('type')) {
      var elem = {
        class: cls,
        key: key,
        type: data.type
      };
      if(cls == 'id' || cls == 'originalFilename' || cls == 'filename' || cls == 'creator') {
        elem.hidden = true;
      }
    } else {
      throw "Function requires third parameter to be object with 'type' properties.";
    }  
  } else {
    throw "Function requires third parameter to be object with 'type' properties.";
  }
  var template = this.templateGeneric.html();
  this.firstGroup.append(this.mustacheRender(template, elem));
};

SchemaForm.prototype.addSelectElement = function(key, cls, data) {
  if(typeof data === 'object') {
    if(data.hasOwnProperty('enum')) {
      var elem = {
        class: cls,
        key: key,
        enum: data.enum
      };
    } else {
      throw "Function requires third parameter to be object with 'enum' properties.";
    }
  } else {
    throw "Function requires third parameter to be object with 'enum' properties.";
  }
  var template = this.templateInputSelect.html();
  this.firstGroup.append(this.mustacheRender(template, elem));
};


SchemaForm.prototype.makeGenericElement = function(mold, key, cls, type) {
  var obj = {
    class: cls,
    key: key,
    type: type
  };
  if(cls == 'id') {
    obj.hidden = true;
  }
  var template = mold.html();
  return this.mustacheRender(template, obj);
};

SchemaForm.prototype.addFieldset = function(key, data, index) {
  if(key == 'creator') {
    return;
  }
  var index = index || 0;
  var fieldset = $("<fieldset></fieldset>");
  var items = [];

  if(typeof data === 'object') {
    if(data.hasOwnProperty('type')) {
      var type = data.type;
    } else {
      throw "Function requires second parameter to be object with 'type' properties";
    }
  } else {
    throw "Function requires second parameter to be object with 'type' properties";
  }

  fieldset.append("<legend>"+key+"</legend>");

  if(type == 'object') {
    if(data.hasOwnProperty('properties')) {
      var source = data.properties;
    } else {
      throw "No properties 'properties' in second parameter object";
    }
    for (var it in source) {
      var html = this.addFieldsetObject(source[it], key, it);
      fieldset.append(html);
    }
    fieldset.attr("data-element", count);
  } else {
    var source = data.items;
    var count = 0;
    if(source.type == "object") {
      var prop = source.properties;
      for(var it in prop) {
        fieldset.append(this.makeGenericElement(this.templateGeneric, key+"."+index+"."+it, it, prop[it].type));
        count = count + 1;
      }
    } else {
      fieldset.append(this.makeGenericElement(this.templateGeneric, key+"."+index, key, source.type));
      count = 1;
    }
    var templateBtn = this.templateBtnAdd.html();
    fieldset.append(this.mustacheRender(templateBtn, { index: index, key: key }));
    fieldset.attr("data-element", count);
  }

  this.secondGroup.append(fieldset);
};

SchemaForm.prototype.addFieldsetObject = function(source, key, it) {
  if(source.enum) {
    var obj = {
      class: it,
      key: key+"."+it,
      enum: source.enum
    };
    var template = this.templateInputSelect.html();
    return this.mustacheRender(template, obj);
  } else {
    return this.makeGenericElement(this.templateGeneric, key+"."+it, it, source.type);
  }
};

$.fn.serializeObject = function() {
  var o = {};
  var a = this.serializeArray();
  $.each(a, function() {
    var split =  this.name.split(".")
    var key = split[0];

    if(split.length == 2) {
      var prop = split[1];
      // if prop is number, then element is array
      if(!isNaN(parseInt(prop))) {
        if(typeof o[key] === 'undefined') {
          o[key] = [];
        }
        if(typeof o[key][parseInt(prop)] === 'undefined') {
          obj = {};
          obj[key] = this.value;
          o[key].push(obj);
        } else {
          o[key][parseInt(prop)][key] = this.value;
        }
      } else { // if prop is not number, then element is object
        if(typeof o[key] === 'undefined') {
          o[key] = {};
        }
        o[key][prop] = this.value;
      }
    } 
    else if (split.length == 3) {
      var prop = split[2];
      var parent = split[1];

      if(typeof o[key] === 'undefined') {            
        o[key] = [];
      }
      if(typeof o[key][parseInt(parent)] === 'undefined') {
        obj = {};
        obj[prop] = this.value;
        o[key].push(obj);
      } else {
        o[key][parseInt(parent)][prop] = this.value;
      }
    } else {
      o[key] = this.value;
    }
  });
return o;
};

SchemaForm.prototype.submitForm = function(option, response) {
  var response = response || null;
  var data = this.container.serializeObject();
  var creator = this.creator.getFromStorage();
  var self = this;
  data.creator = creator.name;
  // console.log(JSON.stringify(data));
  if(option == "new") {
     data.filename = response.filename;
     data.originalFilename = response.originalFilename;
    $.ajax({
      url: self.domain + "metadata",
      method: "POST",
      contentType: "application/json",
      data: JSON.stringify(data),
      progress: function() {
        self.nanobar.go(50);
      },
      success: function(data) {
        self.nanobar.go(100);
        self.statistic.getStat();
      },
      error: function(data) {
        console.log(data);
      }
    });
  } else {
    $.ajax({
      url: self.domain + "metadata/" + self.id,
      method: "PUT",
      contentType: "application/json",
      data: JSON.stringify(data),
      progress: function() {
        self.nanobar.go(50);
      },
      success: function(data) {
        self.nanobar.go(100);
        self.statistic.getStat();
        self.flash.show("success", data);
      },
      error: function(data) {
        console.log(data);
      }
    });
  }
};

SchemaForm.prototype.getFormValue = function() {
  return this.container.serializeObject();
}

SchemaForm.prototype.addField = function() {
  var target = $(this);
  var index = parseInt(target.parent().attr("data-index"));
  var fieldset = target.parent().parent();
  var limit = parseInt(fieldset.attr("data-element"));
  var piv = fieldset.children(".act-input");
  var inputs = fieldset.children(".input");
  var count = 0;
  var self = this;

  $.each(inputs, function() {
    if(count < limit) {
      var el = $(this).clone();
      var name = el.children("input").attr("name");
      var split = name.split(".");
      split[1] = index + 1;
      var join = split.join(".");
      el.children("input").attr("name", join);
      el.children("label").attr("for", join);
      if(limit > 1) {
        piv.before("<div class='input input-"+split[2]+"'>"+el.html()+"</div>");
      } else {
        piv.before("<div class='input input-"+split[0]+"'>"+el.html()+"</div>");
      }
      count = count + 1;
    } else {
      return false;
    }
  });

  target.parent().attr("data-index", index + 1);
};

SchemaForm.prototype.makeFieldElement = function(source) {
  var el = source.clone();
  var name = el.children("input").attr("name");
  var split = name.split(".");
  split[1] = index + 1;
  var join = split.join(".");
  el.children("input").attr("name", join);
  el.children("label").attr("for", join);

  return el;
};

SchemaForm.prototype.setStat = function(Stat) {
  this.statistic = Stat;
}
/**
 * Module: ContentTab
 * Description: Event handler for content tabs
 * Dependencies:
 *   local:
 *     - [local module]
 *   external:
 *     - jQuery
 *     - jquery.geturlparam.js
 */

function ContentTab() {
  // current scope
  var self = this;

  // jQuery DOM
  self.container = $(".items-wrap .add-form");

  self.tab = {
    content: $(".add-form .group-input"),
    button: $(".act-tabs .tab")
  };

  self.tabMain = {
    content: self.container.children(".group-1"),
    button: $(".tab-main"),
    link: "?tab=1"
  };

  self.tabOptional = {
    content: self.container.children(".group-2"),
    button: $(".tab-optional"),
    link: "?tab=2"
  };

  self.tabFile = {
    content: self.container.children(".group-3"),
    button: $(".tab-file"),
    link: "?tab=3"
  }; 

  // initial function
  self.init();

  // event handler
  self.tab.button.on("click", function(e) {
    self.switchTab($(this), self);
  });
}

/**
 * Initial function / go to current tab
 * @return {void}
 */
ContentTab.prototype.init = function() {
  this.switchTab(this.getCurrentTab(), this);
}

/**
 * Get current tab based on url query parameter 'tab'
 * @return {jQuery DOM} tab button
 */
ContentTab.prototype.getCurrentTab = function() {
  var currentTab = $(document).getUrlParam("tab");
  if(currentTab === "1") {
    return this.tabMain.button;
  } else if(currentTab === "2") {
    return this.tabOptional.button;
  } else {
    return this.tabFile.button;
  }
}

/**
 * Show desired tab
 * @param  {jQuery DOM} tab
 * @return {void}
 */
ContentTab.prototype.show = function(tab) {
  tab.content.addClass("show");
  tab.button.addClass("active");
  window.history.pushState(null, null, tab.link);
}

/**
 * Reset tab
 * @return {void}
 */
ContentTab.prototype.reset = function() {
  this.tab.content.removeClass("show");
  this.tab.button.removeClass("active");
}

/**
 * Switch to tab
 * @param  {jquery DOM} target  clicked tab button 
 * @param  {scope} parentScope 
 * @return {void}
 */
ContentTab.prototype.switchTab = function(target, parentScope) {
  var tab;
  if(target.hasClass("tab-main")) {
    tab = parentScope.tabMain;
  } else if(target.hasClass("tab-optional")) {
    tab = parentScope.tabOptional;
  } else {
    tab = parentScope.tabFile; 
  }
  parentScope.reset();
  parentScope.show(tab);
}
/**
 * Module: Upload
 * Description: upload file handling
 * Dependencies:
 *   local:
 *     - SchemaForm
 *   external:
 *     - jQuery
 *     - Nanobar.js
 */

function Upload () {
    var self = this;
    self.domain = "http://localhost:8001/";
    var setting = {
      url: self.domain + "upload",
      acceptFileTypes: /(\.|\/)pdf$/i,
      add: function(e, data) {
        self.add(e, data);
      },
      progressall: function(e, data) {
        var progress = parseInt(data.loaded / data.total * 100, 10);
        self.nanobar.go(progress);
      },
      done: function(e, data) {
        self.done(e, data);
      }
    };

    self.listFile.bind("changeContent", function() {
      if(self.utils.isContainNoHTML($(this))) {
        self.buttonAddFile.attr("disable", true);
      }
    }); 

    this.buttonAddFile.on("click", function(e){
      e.preventDefault();
      if($(this).attr("disable") != 'true') {
        self.uploadForm.trigger("click");
        self.totalFile = self.totalFile + 1;
      }
    });

    this.uploadForm.fileupload(setting);
}

Upload.prototype.uploadForm = $("#fileupload");
Upload.prototype.progress = $(".act-upload-progress p");
Upload.prototype.progressBar = $(".prog-upload");
Upload.prototype.buttonSave = $(".act-save");
Upload.prototype.listFile = $(".list-file");
Upload.prototype.buttonAddFile = $(".act-upload");
Upload.prototype.form = null;
Upload.prototype.totalFile = 0;
Upload.prototype.utils = new Utils();

Upload.prototype.nanobar = new Nanobar({
  id: "nanobar"
});

Upload.prototype.flash = new Flash();

Upload.prototype.fileCount = 0;

Upload.prototype.getSetting = {
    url: "http://localhost:8001/upload",
    acceptFileTypes: /(\.|\/)pdf$/i,
    add: this.add,
    progressAll: this.progressFile,
    done: this.done
};

Upload.prototype.getReadableFileSizeString = function(fileSizeInBytes) {
  var i = -1;
  var byteUnits = [' kB', ' MB', ' GB', ' TB', 'PB', 'EB', 'ZB', 'YB'];
  do {
    fileSizeInBytes = fileSizeInBytes / 1024;
    i++;
  } while (fileSizeInBytes > 1024);

  return Math.max(fileSizeInBytes, 0.1).toFixed(1) + byteUnits[i];
};

Upload.prototype.incrementFileCount = function() {
  this.fileCount = this.fileCount + 1;
  return this.fileCount;
}

Upload.prototype.appendProgressUpload = function (index, file) {
  var progressTemplate = 
  '<li class="item-upload">\
  <div class="file-name">'+file.name+'</div>\
  <div class="file-prog">'+this.getReadableFileSizeString(file.size)+'</div>\
  <div class="act-cancel">\
  <span class="btn btn-remove"></span>\
  </div>\
  </li>'; 
  this.progressBar.append($(progressTemplate));
}

Upload.prototype.appendListFile = function (file) {
  var template = 
  '<div class="file">\
  <div class="file-name">'+file.name+'</div>\
  <div class="file-size">'+this.getReadableFileSizeString(file.size)+'</div>\
  </div>';
  this.listFile.append($(template));
}

Upload.prototype.add = function (e, data) {
  var self = this;
  self.listFile.trigger("changeContent"); 
  $.each(data.files, function(index, file) {
    self.appendListFile(file);
  });
  self.buttonSave.on("click", function() { 
    var formData = self.form.getFormValue();
    if(formData.number !== '') {
      data.formData = { date: formData.publishedDate };
      data.submit(); 
    } else {
      self.flash.show("error", "Please fill number field before saving.");
    } 
  });
};

Upload.prototype.progressFile = function (e, data) {
  var progress = parseInt(data.loaded / data.total * 100, 10);

  this.nanobar.go(progress);
}

Upload.prototype.done = function(e, data) {
  this.flash.show("success");
  this.form.submitForm("new", data.result.data);
}

Upload.prototype.upload = function(url) {
  this.uploadForm.fileupload(this.getSetting(url));
}

Upload.prototype.setForm = function(Form) {
  this.form = Form;
}
/**
 * Module: Statistic
 * Description: Metadata statistic, displayed in sideNav
 * Dependencies:
 *   local:
 *     - [local module]
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function Statistic() {
  this.domain = "http://localhost:8001/";
}

/**
 * Get statistic data
 * @return {void}
 */
Statistic.prototype.getStat = function () {
  var self = this;
  $.ajax({
    url: this.domain + "metadata/count",
    method: "GET",
    dataType: "json",
    success: function(data) {
      self.drawStatistic(data);
    }
  });
}

/**
 * Draw statistic in sideNav
 * @param  {object} data
 * @return {void}
 */
Statistic.prototype.drawStatistic = function (data) {
  var sideNav = $(".side-nav");
  var uncompleteNav = sideNav.find("ul .go-incomplete");
  var completeNav = sideNav.find("ul .go-complete");
  var allNav = sideNav.find("ul .go-all");

  uncompleteNav.find("span").text(data.uncomplete);
  completeNav.find("span").text(data.complete);
  allNav.find("span").text(data.all);
}


/**
 * Module: SideNav
 * Description: SideNav handler
 * Dependencies:
 *   local:
 *     - Statistic
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function SideNav() {
  // properties
  this.statistic = new Statistic();
  this.domain = 'http://localhost:8001/';
  this.urls = {
    incomplete: this.domain + 'metadata?view=incomplete&orderBy=created_at&order=desc&page=1',
    complete: this.domain + 'metadata?view=complete&orderBy=created_at&order=desc&page=1',
    all: this.domain + 'metadata?view=all&orderBy=created_at&order=desc&page=1'
  }

  // jQuery DOM
  this.sideNav = $(".side-nav");
  this.template = $("#template-sidenav");

  // initial function
  this.init();
}

/**
 * Initial function
 * @return {void}
 */
SideNav.prototype.init = function() {
  this.draw($(document).getUrlParam('view'));
  this.statistic.getStat();
}

/**
 * Draw sideNav DOM
 * @param  {string} urlParam
 * @return {void}         
 */
SideNav.prototype.draw = function(urlParam) {
  var template = this.template.html();
  Mustache.parse(template);

  this.sideNav.append(Mustache.render(template, { urls: this.urls }));
  this.appendActiveClass(urlParam);
}

/**
 * [appendActiveClass description]
 * @param  {string} urlParam
 * @return {void}         
 */
SideNav.prototype.appendActiveClass = function(urlParam) {
  var nav = this.sideNav.children('ul');
  nav.children('li').removeClass('active');

  if(urlParam) {
    nav.children('.go-'+urlParam).addClass('active');
  }
}
/**
 * Module: Modal
 * Description: event handler for modal component
 * Dependencies:
 *   local:
 *     - Auth
 *     - Creator
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */

function Modal() {
  // current scope
  var self = this;

  // jQuery DOM
  self.modal = {
    generic: $(".modal"),
    tutorial: $(".modal-tutorial"),
    setting: $(".modal-setting")
  };

  self.tab = {
    button: $(".modal-setting .tab"),
    content: $(".modal-setting .group-setting")
  }

  self.setting = {
    sync: {
      content: $(".modal-setting .group-1"),
      button: $(".modal-setting .tab-sync")
    },
    creator: {
      content: $(".modal-setting .group-2"),
      button: $(".modal-setting .tab-creator")
    },
    account: {
      content: $(".modal-setting .group-3"),
      button: $(".modal-setting .tab-account")
    }
  }

  self.buttonClose = $(".act-modal .btn-close");
  self.buttonSaveCreator = $(".act-modal .btn-save-creator");
  self.buttonSaveAccount = $(".act-modal .btn-save-account");
  self.buttonSaveSync = $(".act-modal .btn-save-sync");

  self.creator = new Creator();
  self.user = new User();
  self.auth = new Auth();
  self.sync = new Sync();

  // event handler
  self.buttonClose.on("click", function(e) {
    self.hide(self.modal.generic);
  });

  self.tab.button.on("click", function(e) {
    e.preventDefault();

    self.switchTab($(this), self);
  });

  self.buttonSaveCreator.on("click", function(e) {
    e.preventDefault();

    self.creator.update(self.auth.getUser(), self.auth.getToken());
  });

  self.buttonSaveAccount.on("click", function(e) {
    e.preventDefault();

    self.user.update(self.auth.getToken());
  });

  self.buttonSaveSync.on("click", function(e) {
    e.preventDefault();

    self.sync.save(self.auth.getToken());
  });

  self.init();


}

Modal.prototype.init = function() {
  if(this.creator.getFromStorage() == null) {
    this.show($(".modal-setting"));
    this.setting.creator.button.trigger("click");
  } else {
    this.setting.sync.button.trigger("click");
  }
}

/**
 * Show component / trigger to add class 'show'
 * @param  {jQuery DOM} el
 * @return {void}   
 */
Modal.prototype.show = function(el) {
  el.addClass("show");
}

/**
 * Hide component / trigger to remove class 'show'
 * @param  {jQuery DOM} el
 * @return {void}   
 */
Modal.prototype.hide = function(el) {
  el.removeClass("show");
}

Modal.prototype.switchTab = function(target, parentScope) {
  var tab;

  if(target.hasClass("tab-sync")) {
    tab = parentScope.setting.sync;
    parentScope.sync.render(parentScope.auth.getToken());
  } else if(target.hasClass("tab-creator")) {
    tab = parentScope.setting.creator;
    parentScope.creator.fill(parentScope.auth.getUser(), parentScope.auth.getToken());
  } else {
    tab = parentScope.setting.account;
    parentScope.user.fill(parentScope.auth.getToken());
  }

  parentScope.resetTab();
  parentScope.showTab(tab);
}

Modal.prototype.resetTab = function() {
  this.tab.content.removeClass("show");
  this.tab.button.removeClass("active");
}

Modal.prototype.showTab = function(tab) {
  tab.content.addClass("show");
  tab.button.addClass("active");
}
/**
 * Module: User
 * Description: manage user data
 * Dependencies:
 *   local:
 *     - [local module]
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function User () {

  var self = this;

  self.flash = new Flash();

  self.userKey = 'usrmm';

}

User.prototype.init = function() {
  // this.getUserData();
}

/**
 * Save user data
 * @return {void}
 */
User.prototype.fill = function(token) {
  var self = this;

  var data = self.getFromStorage();

  if(data != null) {
    self.render(data);
  } else {
    $.ajax({
      url: "http://localhost:8001/api/users",
      method: "GET",
      contentType: "application/json",
      beforeSend: function(xhr) {
        xhr.setRequestHeader("Authorization", "Bearer " + token);
      },
      success: function(response) {
        self.saveToStorage(response.user);
        self.render(response.user);
      },
      error: function(e, data) {
        console.log(e);
      }
    });
  }

}

User.prototype.render = function(data) {
  if(data) {
    $(".modal-setting .input-username input").val(data.username);
    $(".modal-setting .input-email input").val(data.email);
  }
}

User.prototype.getInput = function() {
  return {
    username : $(".modal-setting .input-username input").val(),
    email : $(".modal-setting .input-email input").val()
  };
}

User.prototype.update = function(token) {
  var self = this;
  var input = self.getInput();
  var user = self.getFromStorage();

  $.ajax({
    url: "http://localhost:8001/api/users/" + user.id,
    method: "PUT",
    contentType: "application/json",
    data: JSON.stringify(input),
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    success: function(response) {
      input.id = user.id;
      self.saveToStorage(input);
      self.flash.show("success");
    },
    error: function(e, data) {
      console.log(e);
    }
  }); 

}

/**
 * Get creator data
 * @return {object}
 */
User.prototype.getFromStorage = function() {
  var user =  localStorage.getItem(this.userKey);
  return JSON.parse(user)
}

User.prototype.saveToStorage = function(data) {
  localStorage.setItem(this.userKey, JSON.stringify(data));
}

User.prototype.removeFromStorage = function() {
  localStorage.removeItem(this.userKey);
}
/**
 * Module: Creator
 * Description: manage creator data
 * Dependencies:
 *   local:
 *     - Flash
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function Creator () { 

  var self = this; 

  self.flash = new Flash();

  self.creatorKey = 'crtmm';

}

Creator.prototype.init = function() {
 
}

/**
 * Save creator data
 * @return {void}
 */
Creator.prototype.fill = function(user, token) {
  var self = this;

  // var token = self.auth.getToken();

  // var user = self.auth.getUser();

  var data = self.getFromStorage();

  if(data != null) {
    self.render(data);
  } else {
    $.ajax({
      url: "http://localhost:8001/api/creators",
      method: "GET",
      contentType: "application/json",
      beforeSend: function(xhr) {
        xhr.setRequestHeader("Authorization", "Bearer " + token);
      },
      success: function(response) {
        self.saveToStorage(response.creator);
        self.render(response.creator);
      },
      error: function(e, data) {
        console.log(e);
      }
    });
  }

}

Creator.prototype.render = function(data) {
  if(data) {
    $(".modal-setting .input-id input").val(data.id);
    $(".modal-setting .input-name input").val(data.name);
    $(".modal-setting .input-type input").val(data.type);
    $(".modal-setting .input-administrativeLevel select").val(data.administrativeLevel);
    $(".modal-setting .input-region").val(data.region);
    $(".modal-setting .input-fields input").val(data.fields);
    $(".modal-setting .input-siteUrl input").val(data.siteUrl);
  }
}

Creator.prototype.getInput = function(user) {
  return {
    id : $(".modal-setting .input-id input").val(),
    userId : user.id,
    name : $(".modal-setting .input-name input").val(),
    type : $(".modal-setting .input-type input").val(),
    administrativeLevel : $(".modal-setting .input-administrativeLevel select").val(),
    region : $(".modal-setting .input-region").val(),
    fields : $(".modal-setting .input-fields input").val(),
    siteUrl : $(".modal-setting .input-siteUrl input").val()
  };
}

Creator.prototype.update = function(user, token) {
  var self = this;
  var input = self.getInput(user);

  $.ajax({
    url: "http://localhost:8001/api/creators/",
    method: "POST",
    contentType: "application/json",
    data: JSON.stringify(input),
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    success: function(response) {
      self.saveToStorage(input);
      self.flash.show("success");
    },
    error: function(e, data) {
      console.log(e);
    }
  });

}

/**
 * Get creator data
 * @return {object}
 */
Creator.prototype.getFromStorage = function() {
  var creator = localStorage.getItem(this.creatorKey);

  if(creator === 'undefined') {
    return null;
  } else {
    return JSON.parse(creator); 
  }
}

Creator.prototype.saveToStorage = function(data) {
  localStorage.setItem(this.creatorKey, JSON.stringify(data));
}

Creator.prototype.removeFromStorage = function() {
  localStorage.removeItem(this.creatorKey);
}
/**
 * Module: Sync
 * Description: manage rsync preferences
 * Dependencies:
 *   local:
 *     - Flash
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */
function Sync() {
  var self = this;
  self.flash = new Flash();
  self.key = 'synmm'; 
}

Sync.prototype.render = function(token) { 
  var self = this;
  var data = self.getFromStorage();

  if(data) {
    self.fill(data);
  } else {
    $.ajax({
      url: "http://localhost:8001/api/scheduler/",
      method: "GET",
      beforeSend: function(xhr) {
        xhr.setRequestHeader("Authorization", "Bearer " + token);
      },
      success: function(response) {
        // console.log(response);
        self.fill(response.server);
        self.saveToStorage(response.server);
      },
      error: function(e, data) {
        console.log(e);
      }
    });
  }
}

Sync.prototype.fill = function(data) {
  if(data) {
    $(".modal-setting .input-id input").val(data.id);
    $(".modal-setting .input-schedule select").val(data.schedule);
    $(".modal-setting .input-hostname input").val(data.hostname);
    $(".modal-setting .input-address input").val(data.address);
    $(".modal-setting .input-directory input").val(data.directory);
  }
}

Sync.prototype.save = function(token) {
  var self = this;
  var input = self.getInput();
  if(input.id != '') {
    // console.log('update');
    self.update(input, token);
  } else {
    // console.log('create');
    self.create(input, token);
  }
}

Sync.prototype.create = function(input, token) {
  var self = this;
  delete input.id;

  $.ajax({
    url: "http://localhost:8001/api/scheduler/",
    method: "POST",
    contentType: "application/json",
    data: JSON.stringify(input),
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    success: function(response) {
      // console.log(response);
      self.saveToStorage(input);
      self.flash.show("success");
    },
    error: function(e, data) {
      console.log(e);
    }
  });
}

Sync.prototype.update = function(input, token) {
  var self = this;
  var id = input.id;
  delete input.id;

  $.ajax({
    url: "http://localhost:8001/api/scheduler/"+id,
    method: "PUT",
    contentType: "application/json",
    data: JSON.stringify(input),
    beforeSend: function(xhr) {
      xhr.setRequestHeader("Authorization", "Bearer " + token);
    },
    success: function(response) {
      // console.log(response);
      self.saveToStorage(response.server);
      self.flash.show("success");
    },
    error: function(e, data) {
      console.log(e);
    }
  });

}

Sync.prototype.getInput = function() {
  return {
    id: $(".modal-setting .input-id input").val(),
    schedule: $(".modal-setting .input-schedule select").val(),
    hostname: $(".modal-setting .input-hostname input").val(),
    address: $(".modal-setting .input-address input").val(),
    directory: $(".modal-setting .input-directory input").val()
  };
}

/**
 * Get creator data
 * @return {object}
 */
Sync.prototype.getFromStorage = function() {
  var sync =  localStorage.getItem(this.key);
  if(sync === 'undefined') {
    return null;
  } else {
    return JSON.parse(sync);
  }
}

Sync.prototype.saveToStorage = function(data) {
  localStorage.setItem(this.key, JSON.stringify(data));
}

Sync.prototype.removeFromStorage = function() {
  localStorage.removeItem(this.key);
}
/**
 * Module: Preference
 * Description: Event handler for preference component
 * Dependencies:
 *   local:
 *     - Modal
 *     - Auth
 *   external:
 *     - jQuery
 *     - [external module - like open source]
 */

function Preference(){
  // current scope
  var self = this;

  // dependencies
  self.modal = new Modal();
  self.auth = new Auth();

  // options
  self.options = ["setting", "tutorial", "logout"];

  // jQuery DOM
  self.elAccount = $(".act-account p");
  self.elAccountOptions = $(".act-account #account-options");
  self.elSetting = $(".go-setting");
  self.elTutorial = $(".act-tutorial");
  self.elLogout = $(".act-logout");

  // event handler
  // ! should be more readable than this
  self.elAccount.on("click", function(e) {
    if(self.isActive($(this))) {
      self.deactivate(self.elAccount);
    } else {
      self.activate(self.elAccount);
    }
    self.toggle(self.elAccountOptions);
  });

  self.elSetting.on("click", function(e) {
    self.deactivate(self.elAccount);
    self.toggle(self.elAccountOptions);
    self.modal.show(self.modal.modal.setting); 
  });

  self.elTutorial.on("click", function(e) {
    self.deactivate(self.elAccount);
    self.toggle(self.elAccountOptions);
    self.modal.show(self.modal.modal.tutorial);
  });

  self.elLogout.on("click", function(e) {
    self.auth.logout();
  });

  // init function
  self.init();
  
}

Preference.prototype.init = function() {
  this.setUserTag();
  console.log(this.auth.getToken());
}

/**
 * Toggle an element / triggered to toggle show class
 * @param  {jQuery DOM} el 
 * @return {void}    
 */
Preference.prototype.toggle = function(el) {
  el.toggleClass("show");
}

/**
 * Activate an element / triggered to add class 'active'
 * @param  {jquery DOM} el
 * @return {void}   
 */
Preference.prototype.activate = function(el) {
  el.addClass("active");
}

/**
 * Deactivate an element / triggered to remove class 'active'
 * @param  {jquery DOM} el
 * @return {void}   
 */
Preference.prototype.deactivate = function(el) {
  el.removeClass("active");
}

/**
 * Check if an element is active / has class 'active'
 * @param  {jquery DOM}  el
 * @return {Boolean}   
 */
Preference.prototype.isActive = function(el) {
  if(el.hasClass("active")) {
    return true;
  } else {
    return false;
  }
}

Preference.prototype.setUserTag = function() {
  var user = this.auth.getUser();

  $("p.user-name").text(user.username);
}